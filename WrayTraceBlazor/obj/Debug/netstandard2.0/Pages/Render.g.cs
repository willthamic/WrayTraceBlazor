#pragma checksum "C:\Users\Will\OneDrive\Mine\Code\C#\WrayTraceBlazor\WrayTraceBlazor\Pages\Render.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ec692703f68183c6f7e0fe448c7c9de5b24a925e"
// <auto-generated/>
#pragma warning disable 1591
namespace WrayTraceBlazor.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using WrayTraceBlazor;
    using WrayTraceBlazor.Shared;
    using System.Drawing;
    using Vector;
    using WrayTrace;
    using Geometry;
    using System.Diagnostics;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/render")]
    public class Render : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddMarkupContent(0, "<h1>Counter</h1>\n\n");
            builder.OpenElement(1, "p");
            builder.AddContent(2, "Total Time: ");
            builder.AddContent(3, totalTime);
            builder.CloseElement();
            builder.AddContent(4, "\n");
            builder.OpenElement(5, "p");
            builder.AddContent(6, "Scene Generation Time: ");
            builder.AddContent(7, sceneGenerationTime);
            builder.CloseElement();
            builder.AddContent(8, "\n");
            builder.OpenElement(9, "p");
            builder.AddContent(10, "Scene Rendering Time: ");
            builder.AddContent(11, sceneRenderingTime);
            builder.CloseElement();
            builder.AddContent(12, "\n");
            builder.OpenElement(13, "p");
            builder.AddContent(14, "Image Generation Time: ");
            builder.AddContent(15, imageGenerationTime);
            builder.CloseElement();
            builder.AddContent(16, "\n\n");
            builder.OpenElement(17, "button");
            builder.AddAttribute(18, "class", "btn btn-primary");
            builder.AddAttribute(19, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(IncrementCount));
            builder.AddContent(20, "Click me");
            builder.CloseElement();
            builder.AddContent(21, "\n\n");
            builder.OpenElement(22, "button");
            builder.AddAttribute(23, "class", "btn btn-primary");
            builder.AddAttribute(24, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(RenderTable));
            builder.AddContent(25, "Render");
            builder.CloseElement();
            builder.AddContent(26, "\n\n");
            builder.OpenElement(27, "input");
            builder.AddAttribute(28, "type", "checkbox");
            builder.AddAttribute(29, "checked", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(fast));
            builder.AddAttribute(30, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => fast = __value, fast));
            builder.CloseElement();
            builder.AddContent(31, "\n\n");
            builder.OpenElement(32, "p");
            builder.AddContent(33, status);
            builder.CloseElement();
            builder.AddContent(34, "\n\n");
            builder.OpenElement(35, "div");
            builder.AddAttribute(36, "style", "display:flex; flex-direction:row;");
            builder.AddContent(37, "\n");
#line 20 "C:\Users\Will\OneDrive\Mine\Code\C#\WrayTraceBlazor\WrayTraceBlazor\Pages\Render.cshtml"
     for (int i = 0; i < table.GetLength(0); i++)
    {

#line default
#line hidden
            builder.AddContent(38, "        ");
            builder.OpenElement(39, "div");
            builder.AddAttribute(40, "style", "display:flex; flex-direction:column;");
            builder.AddContent(41, "\n");
#line 23 "C:\Users\Will\OneDrive\Mine\Code\C#\WrayTraceBlazor\WrayTraceBlazor\Pages\Render.cshtml"
             for (int j = 0; j < table.GetLength(1); j++)
            {

#line default
#line hidden
            builder.AddContent(42, "                ");
            builder.OpenElement(43, "div");
            builder.AddAttribute(44, "style", "background-color:" + " " + (table[i, j]) + ";" + " width:calc(" + (scale) + " *" + " 1px);" + " height:calc(" + (scale) + " *" + " 1px)");
            builder.CloseElement();
            builder.AddContent(45, "\n");
#line 26 "C:\Users\Will\OneDrive\Mine\Code\C#\WrayTraceBlazor\WrayTraceBlazor\Pages\Render.cshtml"
            }

#line default
#line hidden
            builder.AddContent(46, "        ");
            builder.CloseElement();
            builder.AddContent(47, "\n");
#line 28 "C:\Users\Will\OneDrive\Mine\Code\C#\WrayTraceBlazor\WrayTraceBlazor\Pages\Render.cshtml"
    }

#line default
#line hidden
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 31 "C:\Users\Will\OneDrive\Mine\Code\C#\WrayTraceBlazor\WrayTraceBlazor\Pages\Render.cshtml"
            
int currentCount = 10;

String status = "";

String totalTime;
String sceneGenerationTime;
String sceneRenderingTime;
String imageGenerationTime;

int scaleH = 5;
int widthH = 200;
int heightH = 200;

int scaleL = 50;
int widthL = 20;
int heightL = 20;

int scale = 1;
int width = 50;
int height = 50;

bool fast;
String[,] table = new String[100, 100];
String[,] table0 = { { "rgb(10,10,10)" }, { "rgb(100,100,100)" } };

void IncrementCount()
{
    currentCount++;
}

void RenderTable()
{
    Stopwatch totalStopwatch = new Stopwatch();
    Stopwatch sceneGeneration = new Stopwatch();
    Stopwatch sceneRendering = new Stopwatch();
    Stopwatch imageGeneration = new Stopwatch();

    totalStopwatch.Start();
    sceneGeneration.Start();

    if (fast)
    {
        width = widthL;
        height = widthL;
        scale = scaleL;
    }
    else
    {
        width = widthH;
        height = widthH;
        scale = scaleH;
    }

    Camera camera = new Camera(V(2, -4, 4) * 1.5f, V(-.5f, 1, -.75f).Unit(), 1.2f, width, height);
    Parallelogram floor = new Parallelogram(V(-10, 10, 0), V(-10, -10, 0), V(10, -10, 0));
    Paralleloid cube = new Paralleloid(V(1, 1, 0), V(1, -1, 0), V(-1, 1, 0), V(1, 1, 2));
    Paralleloid cube2 = new Paralleloid(V(0.866025404f, 0.5f, 2), V(0.5f, -0.866025404f, 2), V(-0.5f, 0.866025404f, 2), V(0.866025404f, 0.5f, 3.41f));

    Light light1 = new Light(V(20, -14, 30), 4000);
    Light light2 = new Light(V(15, -14, 30), 5000);


    List<Element> elements = new List<Element>();
    elements.Add(floor);
    elements.Add(cube);
    elements.Add(cube2);

    List<Light> lights = new List<Light>();
    lights.Add(light1);

    Scene scene = new Scene(camera);
    scene.elements = elements;
    scene.lights = lights;

    sceneGenerationTime = sceneGeneration.ElapsedTicks / 1000.0 + "s";
    sceneRendering.Start();

    table = new String[width, height];

    float[,] imageValues = scene.GetIntensityValues(ref status);

    sceneRenderingTime = sceneRendering.ElapsedMilliseconds / 1000.0 + "s";
    imageGeneration.Start();

    float maxIntensity = (from float v in imageValues select v).Max();

    for (int x = 0; x < width; x++)
    {
        for (int y = 0; y < height; y++)
        {

            int intensity = Convert.ToInt32(imageValues[x, y] / maxIntensity * 255);
            table[x, y] = "rgb(" + intensity + "," + intensity + "," + intensity + ")";

        }
    }

    imageGenerationTime = imageGeneration.ElapsedMilliseconds / 1000.0 + "s";
    totalTime = totalStopwatch.ElapsedMilliseconds / 1000.0 + "s";
}

static Vector3 V(float x0, float y0, float z0)
{
    return new Vector3(x0, y0, z0);
}

#line default
#line hidden
    }
}
#pragma warning restore 1591
