@page "/render"
@using System.Diagnostics;

<h1>Counter</h1>

<p>Total Time: @totalTime</p>

<button class="btn btn-primary" onclick="@IncrementCount">Click me</button>

<button class="btn btn-primary" onclick="@RenderTable">Render</button>

<button class="btn btn-primary" onclick="@BigTest">BigTest</button>

<input type="checkbox" bind="@fast" />

<div id="canvasContainer"></div>

<p>@status</p>

@functions {
    int currentCount = 10;

    String status = "";

    String totalTime;

    int scaleH = 5;
    int widthH = 256;
    int heightH = 4256;

    int scaleL = 50;
    int widthL = 20;
    int heightL = 20;

    int scale = 1;
    int width = 50;
    int height = 50;

    bool fast;
    //String[,] table = new String[100, 100];
    //String[,] table0 = { { "rgb(10,10,10)" }, { "rgb(100,100,100)" } };

    void IncrementCount()
    {
        currentCount++;
    }

    void BigTest()
    {
        JSRuntime.Current.InvokeAsync<string>("canvasFunctions.createCanvas",100,100);
    }

    void RenderTable()
    {
        Stopwatch totalStopwatch = new Stopwatch();

        totalStopwatch.Start();

        if (fast)
        {
            width = widthL;
            height = widthL;
            scale = scaleL;
        }
        else
        {
            width = widthH;
            height = widthH;
            scale = scaleH;
        }

        Camera camera = new Camera(V(2, -4, 4) * 1.5f, V(-.5f, 1, -.75f).Unit(), 1.0f, width, height);
        Parallelogram floor = new Parallelogram(V(-10, 10, 0), V(-10, -10, 0), V(10, -10, 0));
        Parallelepiped cube = new Parallelepiped(V(1, 1, 0), V(1, -1, 0), V(-1, 1, 0), V(1, 1, 2));
        //Parallelepiped cube2 = new Parallelepiped(V(0.866025404f, 0.5f, 2), V(0.5f, -0.866025404f, 2), V(-0.5f, 0.866025404f, 2), V(0.866025404f, 0.5f, 3.41f));
        Sphere sphere = new Sphere(V(2, 0, 0.5f), 1f);
        //Cube cube = new Cube(V(2, 0, 0.5f), 1);

        Light light1 = new Light(V(20, -14, 30), 4000);
        Light light2 = new Light(V(15, -14, 30), 5000);

        List<Element> elements = new List<Element>();
        elements.Add(floor);
        //elements.Add(cube);
        //elements.Add(cube2);
        elements.Add(sphere);
        elements.Add(cube);

        List<Light> lights = new List<Light>();
        lights.Add(light1);

        Scene scene = new Scene(camera);
        scene.elements = elements;
        scene.lights = lights;

        //table = new String[width, height];

        float[,] imageValues = scene.GetIntensityValues(ref status);
        int[,] imageValuesInt = new int[width, height];

        float maxIntensity = (from float v in imageValues select v).Max();

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                int intensity = Convert.ToInt32(imageValues[x, y] / maxIntensity * 255);
                imageValuesInt[y, x] = intensity;
                //table[x, y] = "rgb(" + intensity + "," + intensity + "," + intensity + ")";
            }
        }

        JSRuntime.Current.InvokeAsync<string>("canvasFunctions.displayData", imageValuesInt, width, height);

        totalTime = totalStopwatch.ElapsedMilliseconds / 1000.0 + "s";
    }

    static Vector3 V(float x0, float y0, float z0)
    {
        return new Vector3(x0, y0, z0);
    }
}
